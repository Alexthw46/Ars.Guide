---
import SearchResults from "./SearchResults.astro";
---

<div id="searchModal" class="modal" tabindex="-1" aria-labelledby="searchModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollabke modal-fullscreen-md-down">
        <div class="modal-content">
            <div class="modal-header">
                <h1 id="searchModalLabel" class="modal-title fs-5 visually-hidden">Search</h1>
                <button class="btn-close visually-hidden" type="button" data-bs-dismiss="modal" aria-label="Close"></button>
                <div class="search-input flex-grow-1">
                    <form action="#" id="search-form" class="search-form" method="post" accept-charset="UTF-8" role="search">
                        <label for="query" class="visually-hidden">Search</label>
                        <div class="d-flex">
                            <input type="search" id="query" class="search-text form-control form-control-lg" name="query" placeholder="Search" aria-label="Search" maxlength="128" autocomplete="off">
                            <button class="btn btn-link text-decoration-none px-0 ms-3 d-md-none" type="button" data-bs-dismiss="modal" aria-label="Close">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
            <div class="modal-body">
                <p class="search-loading status message mt-3 text-center d-none">Loading search index...</p>
                <p class="search-no-recent message mt-3 text-center">No recent searches</p>
                <p class="search-no-results message d-none mt-3 text-center">No results for "<strong><span class="query-no-results">Query here</span></strong>"</p>
                <div id="searchResults" class="search-results"></div>
                <template>
                    <article class="search-result list-view">
                        <div class="card my-3">
                            <div class="card-body">
                                <header>
                                    <h2 class="h5 title-submitted mb-0"><a href="#" class="stretched-link text-decoration-none text-reset"></a></h2>
                                </header>
                                <div class="content"></div>
                            </div>
                        </div>
                    </article>
                </template>
            </div>
            <div class="modal-footer">
                <ul class="list-inline me-auto d-none d-md-block">
                    <li class="list-inline-item"><kbd class="me-2"><svg width="15" height="15" aria-label="Enter key" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M12 3.53088v3c0 1-1 2-2 2H4M7 11.53088l-3-3 3-3"></path></g></svg></kbd><span class="DocSearch-Label">to select</span></li>
                    <li class="list-inline-item"><kbd class="me-2"><svg width="15" height="15" aria-label="Arrow down" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M7.5 3.5v8M10.5 8.5l-3 3-3-3"></path></g></svg></kbd><kbd class="me-2"><svg width="15" height="15" aria-label="Arrow up" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M7.5 11.5v-8M10.5 6.5l-3-3-3 3"></path></g></svg></kbd><span class="DocSearch-Label">to navigate</span></li>
                    <li class="list-inline-item"><kbd class="me-2"><svg width="15" height="15" aria-label="Escape key" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M13.6167 8.936c-.1065.3583-.6883.962-1.4875.962-.7993 0-1.653-.9165-1.653-2.1258v-.5678c0-1.2548.7896-2.1016 1.653-2.1016.8634 0 1.3601.4778 1.4875 1.0724M9 6c-.1352-.4735-.7506-.9219-1.46-.8972-.7092.0246-1.344.57-1.344 1.2166s.4198.8812 1.3445.9805C8.465 7.3992 8.968 7.9337 9 8.5c.032.5663-.454 1.398-1.4595 1.398C6.6593 9.898 6 9 5.963 8.4851m-1.4748.5368c-.2635.5941-.8099.876-1.5443.876s-1.7073-.6248-1.7073-2.204v-.4603c0-1.0416.721-2.131 1.7073-2.131.9864 0 1.6425 1.031 1.5443 2.2492h-2.956"></path></g></svg></kbd><span class="DocSearch-Label">to close</span></li>
                </ul>
                <p class="d-md-none">Search by ...</p>
            </div>
        </div>
    </div>
</div>

<script>
    import { Modal } from "bootstrap";
    const searchToggleMobile = document.getElementById('searchToggleMobile') as HTMLElement;
    const searchToggleDesktop = document.getElementById('searchToggleDesktop') as HTMLElement;
    const searchModal = document.getElementById('searchModal') as HTMLElement;
    const searchForm = document.getElementById('search-form') as HTMLFormElement;
    const searchInput = document.getElementById('query') as HTMLElement;
    const searchResults = document.getElementById('searchResults') as HTMLElement;

    const modal = new Modal(searchModal, {
        focus: true
    });

    const showModalOnClick = () => {
        modal.toggle();
        document.querySelector('.search-no-recent')?.classList.remove('d-none');
    }

    searchToggleMobile.addEventListener('click', showModalOnClick);
    searchToggleDesktop.addEventListener('click', showModalOnClick);

    let searchResultSelected: HTMLElement;
    let index: number = -1;

    const onKeyDownHandler = (event: KeyboardEvent) => {
        if (event.key === 'Escape') {
            searchForm.reset();
            searchResults.textContent = '';

            if (searchResultSelected) {
                searchResultSelected.classList.remove('selected');
                index = -1;
            }

            document.querySelector('.search-no-results')?.classList.add('d-none');
        }

        if (event.ctrlKey && event.key === "k") {
            event.preventDefault();
            modal.show();

            searchForm.reset();
            searchResults.textContent = '';

            document.querySelector('.search-no-results')?.classList.add('d-none');
        }
    }

    document.addEventListener('keydown', onKeyDownHandler)

    document.addEventListener('click', event => {
        const modalElement = searchModal.contains(event.target as Node);
        if (!modalElement) {
            searchForm.reset();
            searchResults.textContent = '';

            document.querySelector('.search-no-results')?.classList.add('d-none');
        }

        if (searchResultSelected) {
            searchResultSelected.classList.remove('selected');
            index = -1;
        }
    });

    searchModal.addEventListener('shown.bs.modal', () => {
        searchInput.focus();
    });

    document.addEventListener('keydown', event => {
        const results = searchResults.getElementsByTagName('article')
        const len = results.length - 1;
        if (event.key === "ArrowDown") {
            index++;
            if (searchResultSelected) {
                searchResultSelected.classList.remove('selected');
                const next = results[index];
                if (typeof next !== 'undefined' && index <= len) {
                    searchResultSelected = next;
                } else {
                    index = 0;
                    searchResultSelected = results[0];
                }
                searchResultSelected.classList.add('selected');
            } else {
                index = 0;
                searchResultSelected = results[0];
                searchResultSelected.classList.add('selected');
            }
        } else if (event.key === 'ArrowUp') {
            if (searchResultSelected) {
                searchResultSelected.classList.remove('selected');
                index--;
                const next = results[index];
                if (typeof next !== 'undefined' && index >= 0) {
                    searchResultSelected = next;
                } else {
                    index = len;
                    searchResultSelected = results[len];
                }
                searchResultSelected.classList.add('selected')
            } else {
                index = 0;
                searchResultSelected = results[len];
                searchResultSelected.classList.add('selected');
            }
        }
    }, false);

    searchResults.addEventListener('mouseover', () => {
        if (searchResultSelected) {
            searchResultSelected.classList.remove('selected');
        }
    }, false)
</script>

<script is:inline>
    const searchform = document.querySelector('.search-form');

    searchform.addEventListener('input', async (e) => {
        if (e.target.dataset.loaded !== 'true') {
            e.target.dataset.loaded = 'true'

            window.pagefind = await import("/pagefind/pagefind.js");
        }

        const query = document.querySelector('.search-text').value.trim();

        window.pagefind.preload(query);
        const search = await window.pagefind.debouncedSearch(query);
        if (search == null) return;

        const template = document.querySelector('template').content;
        const fragment = document.createDocumentFragment();

        const results = document.querySelector('.search-results');
        results.textContent = '';

        const len = Object.keys(search.results).length;

        if (len === 0 && query === '') {
            document.querySelector('.search-no-results').classList.add('d-none');
            document.querySelector('.search-no-recent').classList.remove('d-none');
        } else if (len === 0 && query !== '') {
            document.querySelector('.search-no-recent').classList.add('d-none');
            const queryNoResults = document.querySelector('.query-no-results');
            queryNoResults.innerText = query;
            document.querySelector('.search-no-results').classList.remove('d-none');
        } else {
            document.querySelector('.search-no-recent').classList.add('d-none');
            document.querySelector('.search-no-results').classList.add('d-none');
        }

        for (const item of search.results) {
            const data = await item.data();

            const result = template.cloneNode(true);
            const a = result.querySelector('a');
            const content = result.querySelector('.content');
            console.log("Got Data", data);
            a.innerHTML = data.meta.title;
            a.href = data.url;
            content.innerHTML = data.excerpt;

            fragment.appendChild(result);
        }

        results.appendChild(fragment);
    });
</script>
