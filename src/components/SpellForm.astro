---
---

<form id="spellForm" style="max-width: 500px" novalidate autocomplete="off" method="post" action="/api/submit">
    <div class="mb-3">
        <label for="author" class="form-label">Author</label>
        <input name="author" required pattern="[A-z0-9 ]+" type="text" class="form-control" id="author" />
    </div>
    <div class="mb-3">
        <label for="spell" class="form-label">Spell</label>
        <input name="spell" required pattern="[A-z ]+" type="text" class="form-control" id="spell" />
    </div>
    <div class="mb-3">
        <label for="glyphs" class="form-label">Glyphs</label>
        <input name="glyphs" required pattern="[A-z ]+" type="text" class="form-control" id="glyphs" />
    </div>
    <div class="mb-3">
        <label for="category" class="form-label">Category</label>
        <input name="category" required class="form-control" id="category" />
    </div>
    <div class="mb-3">
        <label for="addons" class="form-label">Addons</label>
        <input name="addons" class="form-control" id="addons" />
    </div>
    <div class="mb-3">
        <label for="versions" class="form-label">Versions</label>
        <input name="versions" class="form-control" id="versions" />
    </div>
    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <textarea name="description" class="form-control" id="description" placeholder="Optional..." />
    </div>
    <div class="mb-3 form-check">
        <input name="length" type="checkbox" class="form-check-input" value="" id="length" />
        <label for="length" class="form-check-label">Requires spell length increase?</label>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>

<script>
    import TomSelect from 'tom-select';
    const category = new TomSelect("#category", {
        optgroups: [
            { value: 'combat', label: 'Combat' },
            { value: 'other', label: 'Other' },
        ],
        optgroupField: 'class',
        labelField: 'text',
	    searchField: ['text'],
        options: [
            { class: "combat", value: "aggressive", text: "Aggressive" },
            { class: "combat", value: "defensive", text: "Defensive" },
            { class: "combat", value: "support", text: "Support" },
            { class: "other", value: "exploration", text: "Exploration" },
            { class: "other", value: "utility", text: "Utility" },
            { class: "other", value: "automation", text: "Automation" },
            { class: "other", value: "fun", text: "Fun" },
        ],
        maxItems: 1,
    });
    const addons = new TomSelect("#addons", {
        labelField: 'text',
	    searchField: ['text'],
        options: [
            { value: "tmg", text: "Too Many Glyphs" },
            { value: "neg", text: "Not Enough Glyphs" },
            { value: "omega", text: "Ars Omega" },
            { value: "artifice", text: "Ars Artifice" },
            { value: "additions", text: "Ars Additions" },
            { value: "elemental", text: "Ars Elemental" },
            { value: "plus", text: "Ars Plus" },
            { value: "trinkets", text: "Ars Trinkets" },
        ],
        create: true
    });
    const versions = new TomSelect("#versions", {
        labelField: 'value',
	    searchField: ['value'],
        options: [
            { value: "1.16.5" },
            { value: "1.18.2" },
            { value: "1.19.2" },
            { value: "1.20.1" },
        ]
    });
    const form = document.getElementById('spellForm');
    const inputs = document.querySelectorAll('#spellForm input');
    inputs.forEach(input => {
        input.addEventListener('blur', (event) => {
            if ((input as HTMLFormElement).checkValidity()) {
                input.classList.add('is-valid');
                input.classList.remove('is-invalid');
            } else {
                input.classList.remove('is-valid');
                input.classList.add('is-invalid');
            }
        }, false)
    })
    form?.addEventListener('submit', (event) => {
        form.classList.add('was-validated');
        if (!(form as HTMLFormElement).checkValidity()) {
            event.preventDefault()
		    event.stopPropagation()
        }
    }, false)
</script>
