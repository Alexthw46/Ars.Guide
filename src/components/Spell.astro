---
import { Image } from 'astro:assets';
import { addonMap, glyphMap, getMapText } from "../utils/spell-form"

interface Props {
    author: string;
    glyphs: string[];
    addons?: string[];
    description?: string;
    versions: string[];
}

const { author, addons = [], glyphs, description, versions } = Astro.props;

const getAddonText = getMapText(addonMap);
const getGlyphText = getMapText(glyphMap);

const images = import.meta.glob<{ default: ImageMetadata }>('/assets/glyphs/*.{jpeg,jpg,png,gif}')

function toTitleCase(str: string) {
  return str.replaceAll("_", " ").replace(/(^\w{1})|(\s+\w{1})/g, letter => letter.toUpperCase());;
}
---

<Fragment>
    <h6 class="card-subtitle mb-2 text-body-secondary">By {author}</h6>
    <h5 class="card-title mb-2">{glyphs.map(glyph => {
        const path = `/assets/glyphs/${glyph}.png`;
        if (images[path]) {
            return <Image class="me-1" src={images[path]()} alt={`${glyph} glyph`} title={getGlyphText(glyph)} width={25} height={25} />
        }
        return <span class="h6 glyph me-1">{toTitleCase(getGlyphText(glyph))}</span>;
    })} {glyphs.length > 10 && <span class="badge text-bg-dark">Requires infinite spell demo</span>}</h5>
    <p class="card-text" style="white-space: pre-line;">
        {description && <Fragment set:html={description} />}
        <div>
            <div>{addons.map(addon => <span class="badge text-bg-info me-1">{getAddonText(addon)}</span>)}</div>
            <div>{versions.map(version => <span class="badge text-bg-primary me-1">{version}</span>)}</div>
        </div>
    </p>
</Fragment>
